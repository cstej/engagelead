generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  SALES_AGENT
}

model Workspace {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime          @default(now())
  name            String?
  about           String?
  members         WorkspaceMember[]
  updatedAt       DateTime          @updatedAt
  fieldDefinition FieldDefinition[]
  leads           Lead[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  about         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  workspaces    WorkspaceMember[]
  leads         Lead[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model InviteToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  token       String   @unique
  email       String
  workspaceId String   @db.ObjectId
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expires     DateTime
}

model WorkspaceMember {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  role        Role
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lead {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  phone        String
  leadStatus  String
  leadSource  String
  assignedTo  String             @db.ObjectId
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  workspace    Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId  String             @db.ObjectId
  customFields CustomFieldValue[]
  createdBy    User               @relation(fields: [createdById], references: [id])
  createdById  String             @db.ObjectId
}

model FieldDefinition {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  workspace        Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId      String             @db.ObjectId
  label            String
  name             String
  type             String
  options          String[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  customFieldValue CustomFieldValue[]
}

model CustomFieldValue {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  lead              Lead            @relation(fields: [leadId], references: [id])
  leadId            String          @db.ObjectId
  fieldDefinitionId String          @db.ObjectId
  fieldDefinition   FieldDefinition @relation(fields: [fieldDefinitionId], references: [id])
  value             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}
